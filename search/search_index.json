{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"search-x-likes","text":"<p>Search posts from x that you have liked yourself usign the archive download files from x.com. To obtain the data.zip file, follow the request procedure from X.com. Unzip the obtained zip file and update the path called DATA_DIRECTORY in file search_x_likes/list_likes_in_archive.py</p>"},{"location":"modules/","title":"Modules","text":""},{"location":"modules/#search_x_likes.list_likes_in_archive.load_likes","title":"<code>load_likes(data_directory)</code>","text":"<p>Load 'like' data from JavaScript files in a given directory.</p> <p>This function searches for files matching the pattern 'like*.js' within the specified data directory, extracts JSON data from each file, and aggregates the 'like' data into a list.</p> <p>Parameters:</p> Name Type Description Default <code>data_directory</code> <code>str</code> <p>The path to the directory containing the 'like*.js' files.</p> required <p>Returns:</p> Type Description <code>list[dict[str, LikeInfo]]</code> <p>list[dict[str, LikeInfo]]: A list of dictionaries containing 'like' information.</p> <p>Raises:</p> Type Description <code>Exception</code> <p>If there is an error processing any of the files, the exception is caught,        an error message is printed, and the function continues processing remaining files.</p> Source code in <code>search_x_likes/list_likes_in_archive.py</code> <pre><code>def load_likes(data_directory: str) -&gt; list[dict[str, LikeInfo]]:\n    \"\"\"\n    Load 'like' data from JavaScript files in a given directory.\n\n    This function searches for files matching the pattern 'like*.js' within the specified\n    data directory, extracts JSON data from each file, and aggregates the 'like' data into a list.\n\n    Args:\n        data_directory (str): The path to the directory containing the 'like*.js' files.\n\n    Returns:\n        list[dict[str, LikeInfo]]: A list of dictionaries containing 'like' information.\n\n    Raises:\n        Exception: If there is an error processing any of the files, the exception is caught,\n                   an error message is printed, and the function continues processing remaining files.\n    \"\"\"\n    likes: list[dict[str, LikeInfo]] = []\n    data_path: Path = Path(data_directory)\n    like_files = data_path.glob(\"like*.js\")\n    for file_path in like_files:\n        with file_path.open(\"r\", encoding=\"utf-8\") as f:\n            content: str = f.read()\n            try:\n                json_data: str = content[content.index(\"=\") + 1 :].strip()\n                like_part: list[dict[str, LikeInfo]] = json.loads(json_data)\n                likes.extend(like_part)\n            except Exception as e:\n                print(f\"Error processing file {file_path}: {e}\")\n    return likes\n</code></pre>"},{"location":"modules/#search_x_likes.embed_posts.get_embedding","title":"<code>get_embedding(client, text, model='text-embedding-ada-002')</code>","text":"<p>Generate embedding vectors for a text using the specified OpenAI model.</p> <p>Parameters:</p> Name Type Description Default <code>client</code> <code>openAI</code> <p>An OpenAI client object</p> required <code>text</code> <code>str]</code> <p>A string containing input text for which to generate embeddings.</p> required <code>model</code> <code>str</code> <p>The name of the embedding model to use.</p> <code>'text-embedding-ada-002'</code> <p>Returns:</p> Type Description <code>list[float]</code> <p>list[float]: A list of float representing an embedding vector.</p> Source code in <code>search_x_likes/embed_posts.py</code> <pre><code>def get_embedding(client: openai.OpenAI, text: str, model: str = \"text-embedding-ada-002\") -&gt; list[float]:\n    \"\"\"\n    Generate embedding vectors for a text using the specified OpenAI model.\n\n    Args:\n        client (openai.openAI): An OpenAI client object\n        text (str]): A string containing input text for which to generate embeddings.\n        model (str, optional): The name of the embedding model to use.\n\n    Returns:\n        list[float]: A list of float representing an embedding vector.\n    \"\"\"\n    cleaned_text = text.replace(\"\\n\", \" \")\n    response = client.embeddings.create(input=[cleaned_text], model=model)\n    # Extract the embedding vector from the response\n    embedding: list[float] = response.data[0].embedding\n    return embedding\n</code></pre>"}]}